initialize() {
     initializeSLiMModelType("nonWF");

     //set aspect ratio of map
     aspectRatio = sqrt(5/3);
     defineConstant("ASPF",sqrt(aspectRatio));

     defineConstant("K", 200);  // carrying-capacity per unit square (20% overestimate)
     defineConstant("S", 0.1);  // sigma_S, the spatial interaction and dispersal distance
     defineConstant("L", 4);    // mean lifetime at stationarity
     defineConstant("W", 8.0);  // width and height of the simulated area

     //chromosomes
     defineConstant("C", 10);
     //chromosome length
     defineConstant("GC", 1e8);

     //make filepath
     OUTDIR="test06";
     defineConstant("FPATH",paste0(c(OUTDIR,"/")));

     initializeSLiMOptions(dimensionality="xy");
     initializeTreeSeq();
     initializeMutationRate(0.0);
     initializeMutationType("m1", 0.5, "f", 0.0);
     initializeGenomicElementType("g1", m1, 1.0);
     initializeRecombinationRate(1e-8);

     // spatial competition and mate choice
     initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
     i1.setInteractionFunction("n", 1.0, S);

     //split genome into chromosomes
     pos=0;
     for(i in 1:C){
        initializeGenomicElement(g1,pos,pos+GC-1);
        pos = pos + GC;
     }
}

reproduction() {
    // choose our nearest neighbor as a mate, within the max distance
    mate = i1.drawByStrength(individual, 1);
    if (mate.size()) {
        for (i in seqLen(rpois(1, 1/L))) {
            offspring = subpop.addCrossed(individual, mate);
            do 
            { 
                pos = individual.spatialPosition + rnorm(2, 0.001, 4*S);
            }
            while (p1.spatialMapValue("5x3b", pos) == 0.0); //reroll until not in the barrier
            offspring.setSpatialPosition(p1.pointReflected(pos));
        }
    }
}

1 late() {
    sim.addSubpop("p1", asInteger(0.8 * W * W * K));
    mapValues = matrix(rep(1.0, 300*500), nrow=300, ncol=500);
    mapValues[94:104, 200:399] = 0;
    mapValues[195:205, 100:299] = 0;
    mapValues = t(mapValues[,(ncol(mapValues)-1):0]);
    p1.defineSpatialMap("5x3b", "xy", gridSize=NULL, values=mapValues);

    p1.setSpatialBounds(c(0.0,0.0,W*ASPF,W/ASPF));
    for (ind in p1.individuals) {
        do pos = p1.pointUniform();
        while (p1.spatialMapValue("5x3b", pos) == 0.0); //reroll until not in the barrier
        ind.setSpatialPosition(pos);
    }

}

2: early() {
    // density-dependant mortality
    i1.evaluate();
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = 2 / (1 + (L + 1) / (L - 1) * (competition / (K * 2 * PI * S^2)));
}

late() {
    // need to evaluate here to be ready for mate choice
    i1.evaluate();
}

1: late() {
    cat(sim.generation + " " + p1.individualCount);
    catn(" " + clock());
}

1:20 late() {
    sim.treeSeqOutput(paste0(c(FPATH, "pop_", format("%03d", sim.generation), ".trees")), simplify=T);
}

// 10000 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_10000.trees")), simplify=T);
// }
// 
// 50000 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_50000.trees")), simplify=T);
// }
// 
// 100000 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_100000.trees")), simplify=T);
// }
//
// 500000 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_500000.trees")), simplify=T);
// }
