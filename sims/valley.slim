initialize() {
     initializeSLiMModelType("nonWF");
     // should define TYPE: 'flat', 'biased', 'barrier', or 'valley'
     // source(paste(c(OUTDIR, "parameters.slim"), sep="/"));
     defineConstant("TYPE", "biased");
     defineConstant("OUTDIR", "~/projects/isolation_by_coalescence/sims/temp");

     defineConstant("K", 200);  // carrying-capacity per unit square (20% overestimate)
     defineConstant("S", 0.1);  // sigma_S, the spatial interaction and dispersal distance
     defineConstant("L", 4);    // mean lifetime at stationarity
     defineConstant("W", 8.0);  // width and height of the simulated area
     defineConstant("DISPERSAL_S", 2 * S); // dispersal distance

     //set aspect ratio of map
     if (TYPE == "barrier") {
          catn("Simulation type: barrier");
          aspectRatio = 5/3;
          defineConstant("LOWER_Y", (W / sqrt(aspectRatio) ) / 3);
          defineConstant("UPPER_Y", 2 * (W / sqrt(aspectRatio) ) / 3);
          defineConstant("LOWER_LEFT", 1 * (W * sqrt(aspectRatio) ) / 5);
          defineConstant("LOWER_RIGHT", 3 * (W * sqrt(aspectRatio) ) / 5);
          defineConstant("UPPER_LEFT", 2 * (W * sqrt(aspectRatio) ) / 5);
          defineConstant("UPPER_RIGHT", 4 * (W * sqrt(aspectRatio) ) / 5);
          defineConstant("BARRIER_HALFWIDTH", DISPERSAL_S * 3 / 2);
     } else {
          aspectRatio = 1;
     }
     defineConstant("ASPF",sqrt(aspectRatio));

     if (TYPE == "biased" | TYPE == "valley") {
          catn("Simulation type: biased");
          bias = 0.01;
     } else {
          bias = 0.0;
     }
     defineConstant("BIAS", bias);

     //chromosomes
     defineConstant("C", 10);
     //chromosome length
     defineConstant("GC", 1e8);

     //make filepath
     defineConstant("FPATH",paste0(c(OUTDIR,"/")));

     initializeSLiMOptions(dimensionality="xy");
     initializeTreeSeq();
     initializeMutationRate(0.0);
     initializeMutationType("m1", 0.5, "f", 0.0);
     initializeGenomicElementType("g1", m1, 1.0);
     initializeRecombinationRate(1e-8);

     // spatial competition and mate choice
     initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
     i1.setInteractionFunction("n", 1.0, S);

     //split genome into chromosomes
     pos=0;
     for(i in 1:C){
        initializeGenomicElement(g1,pos,pos+GC-1);
        pos = pos + GC;
     }
}

reproduction() {
    // choose our nearest neighbor as a mate, within the max distance
    mate = i1.drawByStrength(individual, 1);
    if (mate.size()) {
        for (i in seqLen(rpois(1, 1/L))) {
            offspring = subpop.addCrossed(individual, mate);
            bias = BIAS;
            if ((TYPE == "valley") & (individual.x + individual.y > W)) {
            	bias = -1 * BIAS;
            }
            pos = individual.spatialPosition + rnorm(2, BIAS, DISPERSAL_S);
            offspring.setSpatialPosition(p1.pointReflected(pos));
        }
    }
}

1 late() {
    sim.addSubpop("p1", asInteger(0.8 * W * W * K));
    p1.setSpatialBounds(c(0.0,0.0,W*ASPF,W/ASPF));
    for (ind in p1.individuals)
        ind.setSpatialPosition(p1.pointUniform());
}

2: early() {
    // density-dependant mortality
    i1.evaluate();
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = 2 / (1 + (L + 1) / (L - 1) * (competition / (K * 2 * PI * S^2)));
    if (TYPE == "barrier") {
        x = p1.individuals.x;
        y = p1.individuals.y;
        lower = (abs(y - LOWER_Y) < BARRIER_HALFWIDTH) & (x > LOWER_LEFT) & (x < LOWER_RIGHT);
        upper = (abs(y - UPPER_Y) < BARRIER_HALFWIDTH) & (x > UPPER_LEFT) & (x < UPPER_RIGHT);
        inds.fitnessScaling = inds.fitnessScaling * asFloat(!(lower | upper));
    }
    inds.fitnessScaling = inds.fitnessScaling * pmin(1.0, inds.x) * pmin(1.0, W - inds.x) * pmin(1.0, inds.y) * pmin(1.0, W - inds.y);
}

late() {
    // need to evaluate here to be ready for mate choice
    i1.evaluate();
}

1: late() {
    cat(sim.generation + " " + p1.individualCount);
    catn(" " + clock());
}

// 1:20 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_", format("%03d", sim.generation), ".trees")), simplify=T);
// }

10000 late() {
    sim.treeSeqOutput(paste0(c(FPATH, "pop_10000.trees")), simplify=T);
}

50000 late() {
    sim.treeSeqOutput(paste0(c(FPATH, "pop_50000.trees")), simplify=T);
}

100000 late() {
    sim.treeSeqOutput(paste0(c(FPATH, "pop_100000.trees")), simplify=T);
}

500000 late() {
    sim.treeSeqOutput(paste0(c(FPATH, "pop_500000.trees")), simplify=T);
}
